WEBVTT

1
00:00:02.010 --> 00:00:02.580
Dave Fuller: Okay.

2
00:00:05.370 --> 00:00:10.920
Peter Matseykanets: So in in garbage collected languages like go, for example, that I do.

3
00:00:12.900 --> 00:00:26.820
Peter Matseykanets: The out or work, you know it's it's easy it's all handled by the garbage collector itself, it keeps track of all the variables, whether you still using or reference them from anywhere.

4
00:00:27.900 --> 00:00:37.380
Peter Matseykanets: And if not ages disposal dispose of them right rust does not have garbage collector, which is a good and bad thing.

5
00:00:38.400 --> 00:00:42.930
Peter Matseykanets: Altogether the good thing about it, it doesn't need any runtime.

6
00:00:44.010 --> 00:00:45.720
Peter Matseykanets: To be shipped with a right.

7
00:00:47.160 --> 00:00:53.430
Peter Matseykanets: it's all you know static link, there is now something that runs alongside your Program.

8
00:00:55.290 --> 00:00:55.710
Dave Fuller: And so.

9
00:00:56.040 --> 00:01:06.030
Peter Matseykanets: Then so it's more like c++ you you're lucky you the allocate it's just in rough you the allocates once it goes out of the scope.

10
00:01:15.510 --> 00:01:16.410
Peter Matseykanets: different things.

11
00:01:17.820 --> 00:01:30.090
Peter Matseykanets: which I just yeah I just want to do that, and you have different syntax things that allow you in the rest that allows you to control control the ownership.

12
00:01:31.980 --> 00:01:36.720
Peter Matseykanets: And that's exactly where things become very complicated real quick.

13
00:01:42.330 --> 00:01:47.310
Dave Fuller: ronnie examples, it looks like it's are talking about pointers.

14
00:01:49.560 --> 00:01:55.440
Dave Fuller: Almost, although they don't use the term pointer I guess it's not really a pointer.

15
00:01:58.320 --> 00:02:10.290
Peter Matseykanets: There are pointers and there are references and reference can point to a pointer that points to a location in memory in Vienna on the hip.

16
00:02:11.670 --> 00:02:13.050
Peter Matseykanets: And you can pass around.

17
00:02:13.620 --> 00:02:15.900
Peter Matseykanets: References because they are.

18
00:02:18.990 --> 00:02:24.480
Peter Matseykanets: types of unknown size and therefore allocated on on the stack.

19
00:02:26.580 --> 00:02:36.120
Peter Matseykanets: To they're like no special treatment for those they're like integers or flows right or boolean simplest how I understand it right, but the pointer.

20
00:02:38.700 --> 00:02:44.910
Peter Matseykanets: In the pointer itself, I think, is also on the flip side right, but the memory isn't.

21
00:02:46.650 --> 00:02:48.090
David Fox: Right what it points to.

22
00:02:48.540 --> 00:02:50.490
Peter Matseykanets: Oh yeah what it points to yeah.

23
00:02:50.550 --> 00:02:59.400
David Fox: So, like they are still pointers I guess in the classic sense even I mean at a high level they behave slightly differently than they do like in c++ but.

24
00:03:01.230 --> 00:03:10.200
David Fox: they're still pointers in the classic sense that they are something tiny that just says hey here's your reference to a thing on the heap of.

25
00:03:12.090 --> 00:03:19.350
David Fox: an unknown size right that's the stuff that this other dude this unknown size is what needs to be allocated on the heap at runtime right.

26
00:03:19.740 --> 00:03:25.290
Peter Matseykanets: yeah yeah it just it's just a typical of three values right.

27
00:03:27.600 --> 00:03:28.020
David Fox: Right.

28
00:03:28.290 --> 00:03:34.620
Peter Matseykanets: The pointer is the reference, as I understand is just like one thing that points to.

29
00:03:35.700 --> 00:03:39.330
Peter Matseykanets: A reference is a thing that points to it pointed.

30
00:03:40.230 --> 00:03:44.640
David Fox: You Brian read the referees it's like the simplest of the structures it's literally just a.

31
00:03:44.640 --> 00:03:46.080
David Fox: thing that points to the pointer.

32
00:03:46.590 --> 00:03:46.860
David Fox: yep.

33
00:03:47.160 --> 00:03:49.770
Peter Matseykanets: And then the point capacity or lane yes.

34
00:03:49.830 --> 00:03:52.140
David Fox: yeah the pointer has some metadata.

35
00:03:58.890 --> 00:04:00.840
David Fox: yeah lengthen capacity lady said okay.

36
00:04:02.790 --> 00:04:11.130
Peter Matseykanets: yeah that's for strings for other things that can be something else but yeah, although I don't know, maybe pointers are are the same, I didn't.

37
00:04:12.420 --> 00:04:14.790
Peter Matseykanets: didn't read the whole thing just yet.

38
00:04:16.440 --> 00:04:16.980
Peter Matseykanets: But.

39
00:04:18.930 --> 00:04:33.390
Peter Matseykanets: So I know in go things are handled in some cases similar Lee and there's some structures that have kind of some variability in that pointer structure but.

40
00:04:38.400 --> 00:04:53.220
Peter Matseykanets: But yeah regardless going to the there is a there is a memory that we want to allocate from because it's unknown size, we need, we need to be able to point to where we started what's the length.

41
00:04:54.780 --> 00:05:00.660
Peter Matseykanets: And how much we reserve for for doing any of rights to that part of the memory.

42
00:05:01.920 --> 00:05:15.420
Peter Matseykanets: And we need to be able to free that memory once we stop using it so that we can return it to the operator back to the operating system, otherwise we would leak memory right or use it.

43
00:05:16.650 --> 00:05:21.330
Peter Matseykanets: More and more and crush eventually will be out of memory.

44
00:05:25.560 --> 00:05:27.690
Peter Matseykanets: So that's the whole that's the whole deal.

45
00:05:31.110 --> 00:05:39.750
Peter Matseykanets: But the beauty of rest or that approach, and the same approach sort of counting is like in c++ is that you don't have garbage collector.

46
00:05:40.920 --> 00:05:42.930
Peter Matseykanets: garbage collection takes time.

47
00:05:44.190 --> 00:05:46.530
Peter Matseykanets: And freezes your Program.

48
00:05:48.210 --> 00:05:57.840
Peter Matseykanets: So for a low level programming for you, having type nested loop, and you use a ton of applications by the interview process database records, for example, and you have.

49
00:05:57.900 --> 00:06:05.640
Peter Matseykanets: million of them going over the cursor right, you will be doing a ton of allocations to you know to process that data.

50
00:06:06.840 --> 00:06:07.470
Peter Matseykanets: into in.

51
00:06:07.530 --> 00:06:15.240
Peter Matseykanets: garbage collected world would that would pile up for a while until very selective finally have some time to.

52
00:06:15.450 --> 00:06:16.440
To free that memory.

53
00:06:17.610 --> 00:06:19.470
Peter Matseykanets: Right in the rest, the beauty is.

54
00:06:19.500 --> 00:06:22.470
Peter Matseykanets: That it's you know will be dropping that you can you read the Program.

55
00:06:23.130 --> 00:06:24.060
Peter Matseykanets: in a proper way.

56
00:06:24.300 --> 00:06:25.770
Peter Matseykanets: A little dropping that right away.

57
00:06:33.480 --> 00:06:39.420
Dave Fuller: make sense, I remember memory allocation was there a pain and see.

58
00:06:42.060 --> 00:06:50.430
Dave Fuller: What else remember you can pass pointers into functions, so that anything that happened to.

59
00:06:53.190 --> 00:06:55.680
Dave Fuller: so that you could actually change some.

60
00:07:02.280 --> 00:07:03.750
Dave Fuller: Remember, why we go.

61
00:07:05.400 --> 00:07:10.290
Peter Matseykanets: yeah and you can do exactly the same thing in rust with the references.

62
00:07:12.510 --> 00:07:13.740
Peter Matseykanets: You pass a reference to.

63
00:07:13.740 --> 00:07:16.500
Peter Matseykanets: His trainings, for example, and you can do something with it.

64
00:07:18.270 --> 00:07:23.580
Peter Matseykanets: And in itself doesn't go out of scope to you, retain the value memory.

65
00:07:27.780 --> 00:07:31.380
Peter Matseykanets: problem what's the problem with just passing the pointer in rust.

66
00:07:31.410 --> 00:07:32.700
Peter Matseykanets: is describing.

67
00:07:34.380 --> 00:07:47.490
Peter Matseykanets: I think, in the first part of this chapter is that if you just pass the pointer since the passing argument to the to the function is equivalent to just assigning.

68
00:07:48.870 --> 00:07:58.140
Peter Matseykanets: value to a variable is basically the same thing that pointer will go out of scope and will be dropped once.

69
00:07:59.400 --> 00:08:15.870
Peter Matseykanets: Once that function finished so that's why they have references, so you can pass reference around instead and the pointer stays in scope, at the call side in the scope of the call side of the function if that makes sense.

70
00:08:16.920 --> 00:08:25.680
Peter Matseykanets: So that you don't need to pass in the receive that pointer every single time they illustrated that pretty well with this train.

71
00:08:26.760 --> 00:08:30.480
Peter Matseykanets: right if you if you pass trade, the pointer.

72
00:08:31.080 --> 00:08:31.950
Dave Fuller: door it's.

73
00:08:38.760 --> 00:08:39.180
Dave Fuller: kind of.

74
00:08:40.500 --> 00:08:41.250
Dave Fuller: To.

75
00:08:43.440 --> 00:08:43.830
Dave Fuller: know.

76
00:08:46.650 --> 00:08:48.390
Dave Fuller: Think I got spoiled with Python.

77
00:08:53.730 --> 00:08:56.940
Dave Fuller: I do, I do like a lot of this lot of stuff here in Ross but.

78
00:08:58.110 --> 00:08:59.580
Dave Fuller: it's gonna take me a while to learn it.

79
00:09:04.530 --> 00:09:05.040
Peter Matseykanets: Oh yeah.

80
00:09:05.880 --> 00:09:07.410
Peter Matseykanets: borrowing and ownership.

81
00:09:08.040 --> 00:09:12.390
Peter Matseykanets: That that's that requires a steep learning curve.

82
00:09:14.160 --> 00:09:15.060
Peter Matseykanets: As far as I understand.

83
00:09:19.980 --> 00:09:24.990
Raunak Chitre: So quick question so How was the ownership transferred i'm looking at that same.

84
00:09:27.240 --> 00:09:27.960
Raunak Chitre: The.

85
00:09:29.040 --> 00:09:46.890
Raunak Chitre: example which shows the string and they have a function or less takes ownership i'm just trying to understand how is that ownership transferred from the main function into that takes ownership function, meaning what was I don't see anything special being done.

86
00:09:48.000 --> 00:09:52.860
Peter Matseykanets: Right what's special in the breath is that when you assign if you go even up.

87
00:09:53.550 --> 00:09:58.860
Peter Matseykanets: yeah if you if you instantiate a variable of type string.

88
00:10:00.240 --> 00:10:07.500
Peter Matseykanets: ass and then on the next line, you will do let s two equals ass or s one.

89
00:10:08.580 --> 00:10:12.960
Peter Matseykanets: The S one ceases to exist, you move the variable.

90
00:10:14.100 --> 00:10:14.730
Raunak Chitre: Oh, I see.

91
00:10:15.960 --> 00:10:16.530
Peter Matseykanets: Right.

92
00:10:20.250 --> 00:10:20.880
Peter Matseykanets: And will.

93
00:10:23.220 --> 00:10:27.840
Peter Matseykanets: But that's within the same scope, and that is done to avoid.

94
00:10:29.250 --> 00:10:30.990
Peter Matseykanets: Double free memory.

95
00:10:32.910 --> 00:10:33.270
Peter Matseykanets: Right.

96
00:10:33.330 --> 00:10:47.790
Peter Matseykanets: crocker if they would point to the same thing that according to the rust rules when the both variables go out of scope, they both need to free allocated memory, but if they point to the same.

97
00:10:49.170 --> 00:11:03.720
Peter Matseykanets: To the same memory, then that would cause an error right, that would be invalid, so what they do instead they move the variable so one or assets ceases to exist.

98
00:11:05.280 --> 00:11:07.620
Peter Matseykanets: Once you assigned as to as to.

99
00:11:09.360 --> 00:11:20.760
Peter Matseykanets: In in the case of the function you pass that point or to the function and now that point or the ownership transfer to.

100
00:11:21.660 --> 00:11:35.820
Peter Matseykanets: To that function right, you are in a new scope of that function but that pointer and you hold into it, but once you return out of function, the scope is gone and so rust will call.

101
00:11:36.930 --> 00:11:52.530
Peter Matseykanets: drop trade right and in free the memory, if you at that point, if you have not returned back that pointer and transfer the ownership somewhere else that memory and that variable they're gone.

102
00:11:54.660 --> 00:11:55.620
Raunak Chitre: quarter quarter.

103
00:11:56.790 --> 00:11:57.510
Peter Matseykanets: completely.

104
00:11:59.070 --> 00:12:02.040
Peter Matseykanets: And so that's where the reference data comes in.

105
00:12:03.510 --> 00:12:13.740
Raunak Chitre: cartridge and that's how it is sort of taking care of the memory allocation the allocation, you are not really doing those, but you are doing a template secondly by.

106
00:12:15.000 --> 00:12:16.140
Raunak Chitre: Following that is true.

107
00:12:18.090 --> 00:12:31.950
Peter Matseykanets: Right you're allocating once you calling the function and passing the reference at that point, you are not allocating anything right you just assigning the value in the stack with that reference that points to a pointer.

108
00:12:32.580 --> 00:12:56.220
Peter Matseykanets: or even the function, you can follow that reference to get two pointer and therefore to the memory, so you can do stuff there, and once you out of the function reference ceases to exist, which is perfectly fine and so you do not do allocate anything so the older ownership ownership stayed.

109
00:12:59.220 --> 00:13:01.680
Peter Matseykanets: as it was before the the functional.

110
00:13:03.480 --> 00:13:08.910
Peter Matseykanets: It was that, that is, that is my understanding of what I bred in in tried with their example.

111
00:13:59.640 --> 00:14:01.320
Peter Matseykanets: So what do you want to.

112
00:14:03.540 --> 00:14:04.320
Peter Matseykanets: do with that.

113
00:14:05.970 --> 00:14:06.330
Peter Matseykanets: tonight.

114
00:14:09.780 --> 00:14:14.940
Dave Fuller: I don't know I keep dropping popping back in um one thing I wanted to ask.

115
00:14:17.370 --> 00:14:19.320
Dave Fuller: just looking at the slices.

116
00:14:21.180 --> 00:14:38.760
Dave Fuller: And it seems in see they don't have with a string as as as basically a character array and looking at the slices I feel like the it's somewhat similar with with rust.

117
00:14:51.600 --> 00:14:52.410
David Fox: How so.

118
00:14:53.700 --> 00:14:56.580
Dave Fuller: i'm i'm trying to remember, but it's like in see like.

119
00:14:57.750 --> 00:15:05.130
Dave Fuller: there's an array a string is basically a character array it's not like a true.

120
00:15:09.450 --> 00:15:10.350
Dave Fuller: Variable type.

121
00:15:12.390 --> 00:15:12.960
David Fox: situation.

122
00:15:13.440 --> 00:15:24.510
Dave Fuller: yeah and the way they describe things the slices it sounds like they treat screen very, very similar in that regard with russ.

123
00:15:30.120 --> 00:15:30.870
Does that make sense.

124
00:15:33.120 --> 00:15:44.190
David Fox: sorta is my see is very, very rusty, at best, but I do remember what you were talking about where yeah like been see a string is just a character and character array under the hood.

125
00:15:45.630 --> 00:15:49.890
David Fox: there's no actual string type of the syntax voila.

126
00:15:50.640 --> 00:15:52.200
David Fox: The syntax will allow you to parse it.

127
00:15:53.730 --> 00:15:53.970
David Fox: Just.

128
00:15:55.020 --> 00:15:58.680
Dave Fuller: Reading the slight part about slices makes it sound like there's a.

129
00:16:01.140 --> 00:16:02.490
Dave Fuller: that's just a way of.

130
00:16:12.090 --> 00:16:13.050
David Fox: up to date.

131
00:16:18.960 --> 00:16:20.700
Peter Matseykanets: They will.

132
00:16:22.590 --> 00:16:23.550
David Fox: All right, so it's not just me.

133
00:16:25.530 --> 00:16:31.290
Peter Matseykanets: know and, by the way, David nice nice fun my memory rusty.

134
00:16:33.060 --> 00:16:33.750
Peter Matseykanets: That was good.

135
00:16:33.840 --> 00:16:34.590
David Fox: I do.

136
00:16:37.230 --> 00:16:37.770
David Fox: This.

137
00:16:39.120 --> 00:16:39.720
Dave Fuller: Oh man.

138
00:16:41.700 --> 00:16:42.360
Peter Matseykanets: i'll come back.

139
00:16:44.010 --> 00:16:46.530
Dave Fuller: This is killing me I don't know what is wrong with.

140
00:16:46.800 --> 00:16:47.490
Dave Fuller: My Internet.

141
00:16:50.790 --> 00:16:51.210
Dave Fuller: rockin.

142
00:16:52.620 --> 00:16:53.520
Peter Matseykanets: I think there was.

143
00:16:55.080 --> 00:17:13.200
Peter Matseykanets: Actually, a big difference between slices and a race that was probably kind of remembering from seed from C or c++ and then go there is also a raise in their slices slices are.

144
00:17:14.370 --> 00:17:21.930
Peter Matseykanets: References or structure that points to specific subset of an underlying array.

145
00:17:24.090 --> 00:17:30.660
Peter Matseykanets: In the same problem with rest in the rest arrays are of fix fixed size.

146
00:17:31.680 --> 00:17:35.640
Peter Matseykanets: So if you need to grow and array you need to define the new.

147
00:17:38.220 --> 00:17:44.640
Peter Matseykanets: chunk of memory and then do memory manipulation to to move stuff around.

148
00:17:45.930 --> 00:17:50.040
Peter Matseykanets: Right and so slices are a way.

149
00:17:51.270 --> 00:18:09.330
Peter Matseykanets: To work around that that's a structure that points to different parts of memory, allowing you to treat we're not treat but yeah to treat a set of elements is as of unknown size or of.

150
00:18:09.420 --> 00:18:11.070
David Fox: me as a as a whole.

151
00:18:11.850 --> 00:18:16.020
David Fox: yeah as a separate array as if it were a separate right yes.

152
00:18:16.950 --> 00:18:38.040
Peter Matseykanets: And all the languages and i'm pretty sure russ does that, too, I haven't read just that part about slices but it most likely do a ton of optimizations like not to move array until it's necessary like copy on the right and other stuff but.

153
00:18:39.210 --> 00:18:53.130
Peter Matseykanets: But slices, in other words slices even in direction that points to an underlying array of something or maybe even more generic like collection of something.

154
00:18:54.660 --> 00:18:56.220
Peter Matseykanets: and in this I see.

155
00:18:59.370 --> 00:19:10.530
Peter Matseykanets: They say that it's a reference for continuous segments sequence of elements in the collection and slices a kind of reference, so it does not have ownership that's a.

156
00:19:11.670 --> 00:19:13.560
Peter Matseykanets: that's an important consequence.

157
00:19:15.210 --> 00:19:16.890
Peter Matseykanets: So you can pass it around.

158
00:19:18.420 --> 00:19:24.180
Peter Matseykanets: Without worrying worrying about the ownership, which is really cool.

159
00:19:24.630 --> 00:19:30.870
David Fox: And then it's being manipulated or changed in like you know sub string of the greater array.

160
00:19:34.590 --> 00:19:35.670
David Fox: Or can be modified.

161
00:19:36.180 --> 00:19:44.070
David Fox: Could you could you pass a slice as a mutable reference or is that a compiler if you tried to edit that would that be a compile time error.

162
00:19:45.240 --> 00:19:46.740
Peter Matseykanets: I think it should I didn't.

163
00:19:47.310 --> 00:19:49.860
Peter Matseykanets: Like I say i'm sorry I haven't read but.

164
00:19:50.160 --> 00:19:54.360
David Fox: knows okay i'm looking at i'm looking at that I know they had an example of it.

165
00:19:55.830 --> 00:20:08.310
David Fox: i'm just trying to find it on the the slice type i'm working through in the actual rust programming language physical book and i'm a lot further along, but every read Chapter four in preparation for this, and I know, there was an example and i'm just looking for it.

166
00:20:11.160 --> 00:20:18.960
David Fox: Like if you were to pass a string slice as a mutable reference to a function.

167
00:20:21.000 --> 00:20:25.860
David Fox: I guess the first question is, can you do that, and if you can like the purpose, like the intention of the code.

168
00:20:25.980 --> 00:20:27.060
David Fox: would be to say.

169
00:20:28.230 --> 00:20:30.720
David Fox: This function could change the strength lies.

170
00:20:36.600 --> 00:20:37.320
Where is it.

171
00:20:39.000 --> 00:20:47.010
Peter Matseykanets: Right, I think you should be able to if you say that it's in mutable thing then you need to be able to to their.

172
00:20:55.410 --> 00:20:57.540
David Fox: first word return a slice that.

173
00:21:12.660 --> 00:21:13.980
David Fox: string slices that's parameters.

174
00:21:21.150 --> 00:21:22.920
David Fox: It just had the example.

175
00:21:25.800 --> 00:21:27.420
David Fox: of it as.

176
00:21:28.530 --> 00:21:31.620
David Fox: A a an immutable reference.

177
00:21:32.520 --> 00:21:36.900
David Fox: I thought that was an example of it as a mutable reference.

178
00:21:39.900 --> 00:21:49.410
David Fox: But does that via or would that violate ownership, I saw I saw an example that somewhere i'm sorry guys, I thought ahead and have too much on but i'll find eventually.

179
00:22:51.180 --> 00:22:57.420
Peter Matseykanets: This stack overflow says that twice just strings lenses are immutable period.

180
00:22:59.280 --> 00:23:00.780
David Fox: They are or are not.

181
00:23:01.080 --> 00:23:03.570
Peter Matseykanets: They are they are immutable.

182
00:23:04.410 --> 00:23:18.930
David Fox: Okay, they are immutable by default, but so is it, I guess, I mean, I guess, we can just try and code this real quick and see if it would give me a compiler if you tried to pass a string slice as an immutable or as an immutable reference.

183
00:23:22.260 --> 00:23:22.800
David Fox: So.

184
00:24:19.980 --> 00:24:24.090
Dave Fuller: The participants to share the screen, if you want to show it you're typing in there.

185
00:24:25.110 --> 00:24:28.020
David Fox: Oh sorry yeah the I was trying to see if it would actually give me.

186
00:24:32.850 --> 00:24:33.240
David Fox: A right.

187
00:24:35.220 --> 00:24:37.230
David Fox: Now that when it wants.

188
00:24:42.960 --> 00:24:45.420
David Fox: yeah let me pop over to.

189
00:24:47.880 --> 00:24:48.870
David Fox: share.

190
00:24:50.640 --> 00:24:54.540
David Fox: Where is vs code all right do I have multiples of those.

191
00:24:56.460 --> 00:24:57.510
Dave Fuller: Sure, the right one.

192
00:25:02.970 --> 00:25:06.180
David Fox: Oh crap I missed on a shared on zoom on the second year before.

193
00:25:07.380 --> 00:25:09.330
David Fox: might have to pop back out.

194
00:25:15.720 --> 00:25:16.560
David Fox: brb.

195
00:25:31.980 --> 00:25:36.990
Raunak Chitre: found an example how the new data slice so I just pasted that link on the.

196
00:25:38.130 --> 00:25:38.490
Raunak Chitre: chat.

197
00:25:40.290 --> 00:25:41.700
Raunak Chitre: But it seems to be.

198
00:26:15.600 --> 00:26:24.210
Peter Matseykanets: As far as I understand slices that are not string slices are different slices and they share similar.

199
00:26:25.980 --> 00:26:27.120
Dave Fuller: capabilities.

200
00:26:27.660 --> 00:26:34.860
Peter Matseykanets: For properties, but strength lies, is not the same as slice of integers, for example.

201
00:26:39.330 --> 00:26:42.300
Raunak Chitre: Oh, I see that's why that example is showing ladies yes.

202
00:26:58.350 --> 00:27:00.180
David Fox: Alright, so.

203
00:27:00.750 --> 00:27:02.160
let's try that and then.

204
00:27:04.980 --> 00:27:09.390
David Fox: vs code So hopefully you guys can see vs code.

205
00:27:10.920 --> 00:27:11.370
Peter Matseykanets: with you.

206
00:27:12.000 --> 00:27:12.570
or.

207
00:27:14.310 --> 00:27:18.870
David Fox: forgive the rest of the garbage or just some things here from me, this is just the last window ahead open.

208
00:27:19.200 --> 00:27:23.370
David Fox: From last week or whenever we were working on the fibonacci.

209
00:27:24.390 --> 00:27:26.640
David Fox: function, so I thought.

210
00:27:45.060 --> 00:27:47.850
David Fox: Was that even the right syntax.

211
00:27:54.870 --> 00:28:05.250
David Fox: This is how you set this I always say an is a mutable string slice reference right, and this is not pass that are able to sing.

212
00:28:06.720 --> 00:28:12.960
David Fox: You can be used in several situations, the first is mutable variables excuse anywhere, you can bind to evaluate to a variable name.

213
00:28:17.310 --> 00:28:18.810
David Fox: So maybe there's a different way to do it.

214
00:28:20.310 --> 00:28:22.050
David Fox: If it is possible, or if it.

215
00:28:23.160 --> 00:28:26.430
David Fox: If there is no way to change it to be beautiful.

216
00:28:29.820 --> 00:28:43.620
Peter Matseykanets: Can you do it in the lab statement itself let's move on to something like this and then remove am ut and space in the mind function at the call side, yes.

217
00:28:45.210 --> 00:28:46.170
David Fox: Sorry we're here.

218
00:28:46.770 --> 00:28:48.990
Peter Matseykanets: yeah can you remove it.

219
00:28:54.750 --> 00:28:59.550
Peter Matseykanets: Right, the probably the reference the ampersand in front of them.

220
00:28:59.700 --> 00:29:01.890
David Fox: Oh right right so needs to be a reference.

221
00:29:03.810 --> 00:29:04.110
Peter Matseykanets: Right.

222
00:29:07.980 --> 00:29:08.310
Peter Matseykanets: haha.

223
00:29:08.700 --> 00:29:11.550
David Fox: found it found a string reference.

224
00:29:13.140 --> 00:29:14.460
Peter Matseykanets: No, it doesn't.

225
00:29:16.020 --> 00:29:17.010
Peter Matseykanets: And complains.

226
00:29:18.780 --> 00:29:20.520
David Fox: Right it's like that okay so.

227
00:29:21.750 --> 00:29:28.140
David Fox: This is saying, give me a mutable string out of this or it's attempting to.

228
00:29:33.360 --> 00:29:36.390
David Fox: So expecting immutable string reference, but it found.

229
00:29:37.620 --> 00:29:40.680
David Fox: implied a string reference okay.

230
00:29:40.860 --> 00:29:44.070
David Fox: So much must feel wrong wrong syntax or.

231
00:29:44.970 --> 00:29:45.360
yeah.

232
00:30:05.310 --> 00:30:13.410
David Fox: Okay, but I found the stack overflow answer that I think makes that actually makes sense to me, so this right here.

233
00:30:13.920 --> 00:30:33.450
David Fox: doesn't make sense, anyway, because a string slice my definition like I think you'd mentioned earlier, I think I made me misheard you Peter a string sliced by definition is immutable so having a mutable pointer to an immutable slice doesn't doesn't you couldn't do anything with it anyway.

234
00:30:35.790 --> 00:30:45.300
David Fox: The underlying data is still immutable so having a pointer to that wouldn't make sense, so if you wanted to replace characters.

235
00:30:47.550 --> 00:30:52.260
David Fox: You need you need to correct yeah you need to create a new string in the function.

236
00:30:55.200 --> 00:31:01.920
David Fox: and return that so like you would need to have a return, you need to return a string from the function, I need to manipulate.

237
00:31:04.230 --> 00:31:08.580
David Fox: Whatever your strings slice was inside the function and return that so.

238
00:31:09.720 --> 00:31:10.080
David Fox: Let.

239
00:31:12.030 --> 00:31:13.080
David Fox: me string.

240
00:31:17.760 --> 00:31:18.360
David Fox: Whatever.

241
00:31:29.040 --> 00:31:31.290
David Fox: that's the that's the function, I was remembering from somewhere in the book.

242
00:31:36.000 --> 00:31:36.600
David Fox: That.

243
00:31:42.690 --> 00:31:45.480
David Fox: Oh just push only to your character pushing.

244
00:31:51.000 --> 00:31:53.490
David Fox: string slice onto the end of the string.

245
00:32:07.980 --> 00:32:09.000
David Fox: isn't that a strange place.

246
00:32:11.670 --> 00:32:16.560
David Fox: Okay, can I borrow a new strings mutable it's not declared as mutable.

247
00:32:19.590 --> 00:32:20.070
David Fox: There we go.

248
00:32:20.520 --> 00:32:21.150
Peter Matseykanets: There we go.

249
00:32:22.950 --> 00:32:24.450
David Fox: So that takes a.

250
00:32:26.550 --> 00:32:35.430
David Fox: So we don't mean that that doesn't need to be immutable anymore, so now we just have a string reference that we pass in.

251
00:32:36.780 --> 00:32:41.640
David Fox: Now this function still does not own that slice.

252
00:32:46.020 --> 00:32:47.280
David Fox: we create a new string.

253
00:32:48.780 --> 00:32:49.980
David Fox: From a string literal.

254
00:32:55.050 --> 00:32:55.560
David Fox: Yes or.

255
00:32:58.980 --> 00:32:59.370
David Fox: What.

256
00:33:15.360 --> 00:33:15.990
Peter Matseykanets: sign.

257
00:33:19.260 --> 00:33:20.070
Peter Matseykanets: equals.

258
00:33:21.840 --> 00:33:23.310
Peter Matseykanets: Quite let him whatever.

259
00:33:23.490 --> 00:33:25.320
David Fox: And this will then have to do all right.

260
00:33:27.420 --> 00:33:34.380
David Fox: yeah since we're actually going so we said here, and then, because this would be this would be a compiler right yes it's not mutable.

261
00:33:34.830 --> 00:33:35.220
Peter Matseykanets: mm hmm.

262
00:33:35.400 --> 00:33:36.480
David Fox: Can assign twice.

263
00:33:40.110 --> 00:33:40.620
David Fox: There we go.

264
00:33:42.780 --> 00:33:43.020
David Fox: alright.

265
00:33:44.520 --> 00:33:45.060
David Fox: Okay.

266
00:33:47.190 --> 00:33:49.230
David Fox: Alright, so there's.

267
00:33:50.100 --> 00:34:06.720
David Fox: A little a little deep dive or a shallow dive maybe into strings license so yeah so okay so immutable string slice be like doesn't make any sense, because a string slices by default immutable so having a pointer to it that can change, for some reason just doesn't make any sense at all.

268
00:34:09.240 --> 00:34:09.720
Peter Matseykanets: yep.

269
00:34:10.230 --> 00:34:11.610
Peter Matseykanets: And it seems like if you need that.

270
00:34:11.670 --> 00:34:15.990
Peter Matseykanets: type of manipulation right, you would need to choose a different.

271
00:34:16.410 --> 00:34:17.370
Peter Matseykanets: Data structure.

272
00:34:17.430 --> 00:34:22.320
Peter Matseykanets: Exactly and converted from straying into, for example, a slice of bites.

273
00:34:22.530 --> 00:34:31.380
Peter Matseykanets: Right and then you can have you know, access to individual bites and do whatever manipulation you wanted there and then.

274
00:34:31.530 --> 00:34:32.130
David Fox: yeah.

275
00:34:32.880 --> 00:34:40.680
David Fox: So even if the function could take ownership of it which it doesn't when you're passing a string slice that would be odd anyway because.

276
00:34:40.890 --> 00:34:42.090
David Fox: you're changing.

277
00:34:43.620 --> 00:34:52.410
David Fox: you're changing a string that could theoretically or that would retain ownership back to the calling function and be modified in that function.

278
00:34:53.220 --> 00:35:06.270
David Fox: I think that, like the the syntax could suggest it I guess the compiler just won't let you do that you'd like you said it have to pick a different structure, you need something else to manage that string or make that make that actual edit.

279
00:35:11.160 --> 00:35:12.300
Peter Matseykanets: yep look like it.

280
00:35:12.780 --> 00:35:14.160
David Fox: yeah I offer that.

281
00:35:15.450 --> 00:35:21.570
David Fox: stack overflow article in the chat, just in case anybody wants to look at it it's the it's the first and it's that so it's the chosen answer.

282
00:35:24.000 --> 00:35:38.130
David Fox: Yes, as you can't change your strings life at all so immutable strings lies is not an appropriate type anyway because it's literally a mutable pointer to an immutable slice and all strings slices are immutable stream slices are immutable.

283
00:35:40.890 --> 00:35:43.080
Peter Matseykanets: Right and that's where the difference comes in right.

284
00:35:44.430 --> 00:35:48.990
Peter Matseykanets: Like if you do a slice of integers you can go in and.

285
00:35:49.020 --> 00:35:51.780
Peter Matseykanets: You know right index them and then change them.

286
00:35:52.050 --> 00:35:52.470
yeah.

287
00:35:53.940 --> 00:35:56.400
David Fox: I think that I think that finally makes enough sense to me.

288
00:36:03.300 --> 00:36:04.470
David Fox: Does that make sense to everyone else.

289
00:36:08.430 --> 00:36:09.960
Raunak Chitre: Yes, yes that's.

290
00:36:13.200 --> 00:36:13.440
Raunak Chitre: Good.

291
00:36:18.180 --> 00:36:19.530
David Fox: yeah easy enough to.

292
00:36:19.740 --> 00:36:20.460
Dave Fuller: make sense.

293
00:36:20.490 --> 00:36:23.160
Dave Fuller: Especially the part, so I could hear.

294
00:36:25.230 --> 00:36:25.890
David Fox: Oh sorry.

295
00:36:25.980 --> 00:36:27.990
David Fox: I wasn't my connection.

296
00:36:29.700 --> 00:36:30.570
Dave Fuller: I think it's the.

297
00:36:40.800 --> 00:36:44.040
David Fox: And you got it on the recording this So hopefully.

298
00:36:45.060 --> 00:36:47.460
David Fox: Hopefully, if it wasn't my connection it'll be in the recording.

299
00:36:54.210 --> 00:36:57.450
David Fox: yeah it's always easy enough just to spin up a new rust application.

300
00:36:58.500 --> 00:37:00.270
David Fox: and throw a couple random lines of code in.

301
00:37:11.160 --> 00:37:11.700
David Fox: Nice.

302
00:37:21.060 --> 00:37:25.500
David Fox: Well, what else anybody else have any other questions comments code to share.

303
00:37:27.150 --> 00:37:28.050
David Fox: on Chapter four.

304
00:37:33.120 --> 00:37:34.800
Peter Matseykanets: i'm all for tonight.

305
00:37:35.970 --> 00:37:37.560
Peter Matseykanets: I need to finish the chapter.

306
00:37:40.350 --> 00:37:47.760
David Fox: yeah it was it was interesting going back and reading it so i'm i'm around like I think i'm on Chapter 15 smart pointers.

307
00:37:48.930 --> 00:37:58.170
David Fox: So I think this is the this is this site, the rust length docs just I think they follow that book or maybe the one is written from the other night, I have the version that is.

308
00:37:58.530 --> 00:38:06.480
David Fox: updated for 2018 so some things I guess could theoretically be out of date, but it was good to come back and read this one, there were some.

309
00:38:07.110 --> 00:38:15.060
David Fox: There was some additional syntax in future chapters that I could definitely have benefited from from coming back and reading this chapter and i'm sure others.

310
00:38:17.640 --> 00:38:21.930
David Fox: yeah the ownership ownership stuff is definitely definitely new to me.

311
00:38:27.510 --> 00:38:29.700
Peter Matseykanets: Nice yeah I mean.

312
00:38:31.290 --> 00:38:32.940
Peter Matseykanets: As far as I heard you know.

313
00:38:35.310 --> 00:38:39.840
Peter Matseykanets: You need to come back to that chapter many more times before.

314
00:38:40.680 --> 00:38:49.440
David Fox: yeah it sounds like it is I consider myself an okay engineer i'm by no means a rock star or anything like that, like this, this ownership is a weird.

315
00:38:55.860 --> 00:38:56.280
yep.

316
00:39:00.270 --> 00:39:04.830
Peter Matseykanets: Fortunately, I have to run and, apparently, I am now the.

317
00:39:05.400 --> 00:39:06.750
David Fox: Oh yeah it's already seven o'clock.

318
00:39:06.750 --> 00:39:08.190
Peter Matseykanets: Hope yeah.

319
00:39:09.360 --> 00:39:10.290
David Fox: i'm the host now.

320
00:39:11.220 --> 00:39:11.670
So.

321
00:39:12.930 --> 00:39:15.870
Peter Matseykanets: i'll probably pop recording right.

322
00:39:17.220 --> 00:39:25.500
David Fox: yeah, I guess, so I guess, I guess, we can generally call it, and what we can we can leave David message in the in the meetup or something just to let them know in case he does come back up there is.

323
00:39:25.800 --> 00:39:26.190
No.

324
00:39:28.740 --> 00:39:30.030
David Fox: yeah it says he chose now.

325
00:39:35.430 --> 00:39:36.120
Peter Matseykanets: Dave.

326
00:39:36.150 --> 00:39:37.950
Peter Matseykanets: we're about we're about to leave.

327
00:39:41.610 --> 00:39:43.290
David Fox: yeah Peter and i've gotta jump but.

328
00:39:44.850 --> 00:39:51.810
David Fox: If we want to connect on we I guess we get to use meetup COM to connect you know, for the time being and you've been posting the recordings I think right.

329
00:39:55.980 --> 00:39:56.610
David Fox: If you're there.

330
00:39:58.500 --> 00:39:59.130
Dave Fuller: i'm back.

331
00:40:03.210 --> 00:40:03.630
David Fox: All right.

332
00:40:04.770 --> 00:40:11.280
David Fox: yeah I think Peter and I were united jump, but it was great chatting with you guys tonight and definitely forward to more.

333
00:40:11.490 --> 00:40:12.090
More stood out.

334
00:40:14.100 --> 00:40:18.720
Dave Fuller: Put the last meeting on a YouTube and i'll put this one on there as well.

335
00:40:21.240 --> 00:40:22.020
Dave Fuller: If you can hear me.

336
00:40:22.410 --> 00:40:23.160
Raunak Chitre: yeah yeah.

337
00:40:26.370 --> 00:40:28.050
Dave Fuller: yeah no i'll have this one up.

338
00:40:29.790 --> 00:40:30.480
Dave Fuller: tomorrow.

339
00:40:32.160 --> 00:40:36.120
David Fox: Alright well thanks everybody and have a great night.

340
00:40:38.220 --> 00:40:39.180
Peter Matseykanets: that's all see you.

341
00:40:39.630 --> 00:40:39.930
bye.

